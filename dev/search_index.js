var documenterSearchIndex = {"docs":
[{"location":"#API-Documentation-1","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"#","page":"API Documentation","title":"API Documentation","text":"CurrentModule = SerializationCaches","category":"page"},{"location":"#","page":"API Documentation","title":"API Documentation","text":"SerializationCache\nfetch!\nput!","category":"page"},{"location":"#SerializationCaches.SerializationCache","page":"API Documentation","title":"SerializationCaches.SerializationCache","text":"SerializationCache{T}(path::AbstractString; in_memory_limit,\n                      file_limit, file_gc_ratio)\n\nReturn a SerializationCache instance that holds elements of type T.\n\nA SerializationCache (along with fetch! and put!) implements a simple two-stage cache that is useful for caching objects that take significantly longer to compute from scratch than to (de)serialize from disk.\n\nRecently fetched objects are cached within an in-memory data structure, while less recently fetched objects are (de)serialized to/from the filesystem via Julia's Serialization module. Specifically, if adding an object to the in-memory cache would cause the in-memory cache to grow beyond in_memory_limit elements, the least recently fetched object in the cache is serialized to a .jls file in path. Once the number of .jls files in path exceeds file_limit, less recently deserialized files are deleted to clear space; the actual ratio of files that are deleted during this \"garbage collection\" process is determined by file_gc_ratio.\n\nNote that all .jls files in path at the time of SerializationCache construction are considered to be part of constructed cache.\n\nSee also: fetch!, put!\n\n\n\n\n\n","category":"type"},{"location":"#SerializationCaches.fetch!","page":"API Documentation","title":"SerializationCaches.fetch!","text":"fetch!(f, cache::SerializationCache, key::AbstractString)\n\nReturn the object stored at key in cache. If key doesn't exist cache, set key to f() and return the result.\n\nNote that key must be a valid file name.\n\nAs part of fetching the requested result, this function performs several bookkeeping operations to maintain cache within its configured limits; see SerializationCache for details.\n\n\n\n\n\n","category":"function"},{"location":"#Base.put!","page":"API Documentation","title":"Base.put!","text":"put!(cache::SerializationCache, key::AbstractString, item;\n     directly_to_file::Bool=false)\n\nStore item in cache at key and return item.\n\nIf directly_to_file == true, item is directly serialized to the cache's filesystem layer, skipping the cache's in-memory layer.\n\nNote that key must be a valid file name.\n\n\n\n\n\n","category":"function"}]
}
